package desafio.ubot.avaliafilmes.controller;import desafio.ubot.avaliafilmes.model.document.Filme;import desafio.ubot.avaliafilmes.model.repository.FilmeRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;@Servicepublic class FilmeService {    @Autowired    FilmeRepository filmeRepository;    @Autowired    AutoIncrementeService autoIncrementeService;    public Flux<Filme> findAll() {        return filmeRepository.findAll();    }    // por costume da empresa anterior que eu trabalhei, lá era    // criado uma sequence para ter um id numerico para uma visualização mais facil    public Mono<Filme> save(Filme filme) {        return autoIncrementeService.autoIncremente(filme.sequencia)                .flatMap(autoIncremente -> {                    filme.setFilmeId(autoIncremente.getValor());                    filme.setId(null);                    return filmeRepository.save(filme);                });    }    public Mono<ResponseEntity<Filme>> findById(Integer filmeId) {        return filmeRepository.findByFilmeId(filmeId)                .map(filme -> ResponseEntity.ok().body(filme))                .defaultIfEmpty(ResponseEntity.notFound().build());    }    public Mono<ResponseEntity<Filme>> update(Filme filme) {        return filmeRepository.findByFilmeId(filme.getFilmeId())                .flatMap(filmeOld -> {                    filmeOld.setDescricao(filme.getDescricao());                    filmeOld.setTitulo(filme.getTitulo());                    return filmeRepository.save(filmeOld);                })                .map(filmeNew -> ResponseEntity.ok().body(filmeNew))                .defaultIfEmpty(ResponseEntity.notFound().build());    }    public Mono<ResponseEntity<Void>> delete(Integer filmeId) {        return filmeRepository.findByFilmeId(filmeId)                .flatMap(filme -> filmeRepository.delete(filme)                            .then(Mono.just(ResponseEntity.ok().<Void>build())))                .defaultIfEmpty(ResponseEntity.notFound().build());    }    public Mono<ResponseEntity<Filme>> darNota(Integer filmeId, Integer nota) {        return filmeRepository.findByFilmeId(filmeId)                .flatMap(filmeOld -> {                        filmeOld.setNota(nota);                        return filmeRepository.save(filmeOld);                })                .map(filmeNew -> ResponseEntity.ok().body(filmeNew))                .defaultIfEmpty(ResponseEntity.notFound().build());    }    public Mono<Filme> indicacao() {        return filmeRepository.findFirstByNotaIsNull();    }}